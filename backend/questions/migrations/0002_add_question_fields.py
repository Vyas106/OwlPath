# Generated by Django 5.1.5 on 2025-07-12 10:02

import django.core.validators
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("questions", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="question",
            options={"ordering": ["-last_activity_at"]},
        ),
        migrations.RemoveIndex(
            model_name="question",
            name="questions_created_2d11fa_idx",
        ),
        migrations.RemoveIndex(
            model_name="question",
            name="questions_views_0b999c_idx",
        ),
        migrations.RemoveIndex(
            model_name="question",
            name="questions_is_answ_673faa_idx",
        ),
        migrations.AddField(
            model_name="question",
            name="bounty_amount",
            field=models.PositiveIntegerField(db_index=True, default=0),
        ),
        migrations.AddField(
            model_name="question",
            name="bounty_expires_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="question",
            name="close_reason",
            field=models.CharField(
                blank=True,
                choices=[
                    ("duplicate", "Duplicate"),
                    ("off_topic", "Off Topic"),
                    ("unclear", "Unclear"),
                    ("too_broad", "Too Broad"),
                    ("opinion_based", "Opinion Based"),
                    ("spam", "Spam"),
                ],
                max_length=50,
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="difficulty_level",
            field=models.CharField(
                choices=[
                    ("beginner", "Beginner"),
                    ("intermediate", "Intermediate"),
                    ("advanced", "Advanced"),
                    ("expert", "Expert"),
                ],
                db_index=True,
                default="intermediate",
                max_length=12,
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="is_closed",
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AddField(
            model_name="question",
            name="is_featured",
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AddField(
            model_name="question",
            name="is_pinned",
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AddField(
            model_name="question",
            name="last_activity_at",
            field=models.DateTimeField(
                auto_now_add=True, db_index=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="question",
            name="quality_score",
            field=models.FloatField(db_index=True, default=0.0),
        ),
        migrations.AddField(
            model_name="question",
            name="search_vector",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="question",
            name="unique_views",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name="question",
            name="body",
            field=models.TextField(
                validators=[
                    django.core.validators.MinLengthValidator(
                        20, "Question body must be at least 20 characters."
                    )
                ]
            ),
        ),
        migrations.AlterField(
            model_name="question",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, db_index=True),
        ),
        migrations.AlterField(
            model_name="question",
            name="is_answered",
            field=models.BooleanField(db_index=True, default=False),
        ),
        migrations.AlterField(
            model_name="question",
            name="title",
            field=models.CharField(
                db_index=True,
                max_length=300,
                validators=[
                    django.core.validators.MinLengthValidator(
                        10, "Question title must be at least 10 characters."
                    ),
                    django.core.validators.MaxLengthValidator(
                        300, "Question title cannot exceed 300 characters."
                    ),
                ],
            ),
        ),
        migrations.AlterField(
            model_name="question",
            name="updated_at",
            field=models.DateTimeField(auto_now=True, db_index=True),
        ),
        migrations.AlterField(
            model_name="question",
            name="views",
            field=models.PositiveIntegerField(db_index=True, default=0),
        ),
        migrations.AddIndex(
            model_name="question",
            index=models.Index(
                fields=["created_at", "is_answered"],
                name="questions_created_4ac63d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="question",
            index=models.Index(
                fields=["views", "quality_score"], name="questions_views_48b591_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="question",
            index=models.Index(
                fields=["author", "created_at"], name="questions_author__572d82_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="question",
            index=models.Index(
                fields=["is_closed", "is_answered"], name="questions_is_clos_56e31d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="question",
            index=models.Index(
                fields=["bounty_amount", "bounty_expires_at"],
                name="questions_bounty__e44020_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="question",
            index=models.Index(
                fields=["difficulty_level", "quality_score"],
                name="questions_difficu_232501_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="question",
            index=models.Index(
                fields=["last_activity_at", "is_pinned"],
                name="questions_last_ac_43fe1a_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="question",
            constraint=models.CheckConstraint(
                condition=models.Q(("views__gte", 0)), name="views_non_negative"
            ),
        ),
        migrations.AddConstraint(
            model_name="question",
            constraint=models.CheckConstraint(
                condition=models.Q(("bounty_amount__gte", 0)),
                name="bounty_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="question",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("quality_score__gte", 0.0), ("quality_score__lte", 10.0)
                ),
                name="quality_score_range",
            ),
        ),
    ]
